package FrontEndApp;


/**
* FrontEndApp/FrontEndPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from FrontEnd.idl
* Wednesday, July 22, 2020 4:54:52 o'clock PM EDT
*/

@SuppressWarnings("unchecked")
public abstract class FrontEndPOA extends org.omg.PortableServer.Servant
 implements FrontEndApp.FrontEndOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

@SuppressWarnings("rawtypes")
private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("createPlayerAccount", new java.lang.Integer (0));
    _methods.put ("playerSignIn", new java.lang.Integer (1));
    _methods.put ("playerSignOut", new java.lang.Integer (2));
    _methods.put ("transferAccount", new java.lang.Integer (3));
    _methods.put ("getPlayerStatus", new java.lang.Integer (4));
    _methods.put ("suspendAccount", new java.lang.Integer (5));
    _methods.put ("shutdown", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // FrontEndApp/FrontEnd/createPlayerAccount
       {
         String FirstName = in.read_string ();
         String LastName = in.read_string ();
         int Age = in.read_long ();
         String Username = in.read_string ();
         String Password = in.read_string ();
         String IPAddress = in.read_string ();
         String $result = null;
         $result = this.createPlayerAccount (FirstName, LastName, Age, Username, Password, IPAddress);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // FrontEndApp/FrontEnd/playerSignIn
       {
         String Username = in.read_string ();
         String Password = in.read_string ();
         String IPAddress = in.read_string ();
         String $result = null;
         $result = this.playerSignIn (Username, Password, IPAddress);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // FrontEndApp/FrontEnd/playerSignOut
       {
         String Username = in.read_string ();
         String IPAddress = in.read_string ();
         String $result = null;
         $result = this.playerSignOut (Username, IPAddress);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // FrontEndApp/FrontEnd/transferAccount
       {
         String Username = in.read_string ();
         String Password = in.read_string ();
         String OldIPAddress = in.read_string ();
         String NewIPAddress = in.read_string ();
         String $result = null;
         $result = this.transferAccount (Username, Password, OldIPAddress, NewIPAddress);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // FrontEndApp/FrontEnd/getPlayerStatus
       {
         String AdminUsername = in.read_string ();
         String AdminPassword = in.read_string ();
         String AdminIPAddress = in.read_string ();
         String $result = null;
         $result = this.getPlayerStatus (AdminUsername, AdminPassword, AdminIPAddress);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // FrontEndApp/FrontEnd/suspendAccount
       {
         String AdminUsername = in.read_string ();
         String AdminPassword = in.read_string ();
         String AdminIPAddress = in.read_string ();
         String UsernameToSuspend = in.read_string ();
         String $result = null;
         $result = this.suspendAccount (AdminUsername, AdminPassword, AdminIPAddress, UsernameToSuspend);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // FrontEndApp/FrontEnd/shutdown
       {
         this.shutdown ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:FrontEndApp/FrontEnd:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public FrontEnd _this() 
  {
    return FrontEndHelper.narrow(
    super._this_object());
  }

  public FrontEnd _this(org.omg.CORBA.ORB orb) 
  {
    return FrontEndHelper.narrow(
    super._this_object(orb));
  }


} // class FrontEndPOA
